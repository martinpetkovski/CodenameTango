<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//general
global.lives = 5;
friction = 0.7;
character_speed = 6;
character_speed_sideways = character_speed*0.75;
character_animation_speed = 25;
bJumpUp = 0;
scaleStart = image_xscale;
global.longJump = true;
image_speed = 0;
obj_shadow_player.x = x;
obj_shadow_player.y = y;
depth = 10;

// ability variables
reverse_controls = false;
bridge = 10;
blink = 10;

// speech
speech_cooldown = 0;
speech_cooldown_mark = 100;

// totems
number_of_jumps = 0;
jump_diff = -10;
totem_jump_requirement = 5;
groove = false;
carousel = false;
sunshine = true;

// other
hasMovable = false;
fall = false;
totem_action_radius = 20;


obj_darkness.visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// PROVERKA NA VISINA NA SKOK
if(global.longJump)
{
    jHeight = 0.26;
}
if(!global.longJump)
{
    jHeight = 0.2;
}

if(reverse_controls)
{
    character_speed = -character_speed;
    character_speed_sideways = -character_speed_sideways;
    reverse_controls = false;
}

view_xview[0] = x - (view_wview[0] / 2);
view_yview[0] = y - (view_hview[0] / 2);

if(speech_cooldown &gt; speech_cooldown_mark)
{
    skeletor_selection = choose(sfx_another_one, sfx_i_apreciate_you, sfx_we_the_best, sfx_win_win_win, sfx_you_a_genius, sfx_you_loyal, sfx_you_very_smart, sfx_i_am_not_nice, sfx_i_am_not_kind, sfx_i_am_not_wonderfull, sfx_fools, sfx_not_a_rapper);
    audio_play_sound(skeletor_selection, 10, false);
    speech_cooldown = 0;
}

// DVIZHENJE
if(keyboard_check(vk_up))
{
    image_angle = 0;
    vspeed = -character_speed;
    hspeed = 0;
    image_speed = character_animation_speed;
    
    obj_shadow_player.image_angle = 0;
    obj_shadow_player.vspeed = -character_speed;
    obj_shadow_player.hspeed = 0;
    
    speech_cooldown++;
}

if(keyboard_check(vk_down))
{
    image_angle = 180;
    vspeed = character_speed;
    hspeed = 0;
    image_speed = character_animation_speed;
    
    obj_shadow_player.image_angle = 180;
    obj_shadow_player.vspeed = character_speed;
    obj_shadow_player.hspeed = 0;
    speech_cooldown++;
}


if(keyboard_check(vk_left))
{
    image_angle = 90;
    vspeed = 0;
    hspeed = -character_speed;
    image_speed = character_animation_speed;
    
    obj_shadow_player.image_angle = 90;
    obj_shadow_player.vspeed = 0;
    obj_shadow_player.hspeed = -character_speed;
    speech_cooldown++;
}


if(keyboard_check(vk_right))
{
    image_angle = 270;
    vspeed = 0;
    hspeed = character_speed;
    image_speed = character_animation_speed;
    
    obj_shadow_player.image_angle = 270;
    obj_shadow_player.vspeed = 0;
    obj_shadow_player.hspeed = character_speed;
    speech_cooldown++;
}


if(keyboard_check(vk_up) &amp;&amp; keyboard_check(vk_left)) 
{ 
    image_angle = 45; 
    hspeed = -character_speed_sideways; 
    vspeed = -character_speed_sideways;
    image_speed = character_animation_speed;
    
    obj_shadow_player.image_angle = 45; 
    obj_shadow_player.hspeed = -character_speed_sideways; 
    obj_shadow_player.vspeed = -character_speed_sideways; 
    speech_cooldown++;
} 

if(keyboard_check(vk_up) &amp;&amp; keyboard_check(vk_right)) 
{ 
    image_angle = 360 - 45; 
    hspeed = character_speed_sideways; 
    vspeed = -character_speed_sideways;
    image_speed = character_animation_speed;
    
    obj_shadow_player.image_angle = 360 - 45; 
    obj_shadow_player.hspeed = character_speed_sideways; 
    obj_shadow_player.vspeed = -character_speed_sideways; 
    speech_cooldown++;
} 

if(keyboard_check(vk_down) &amp;&amp; keyboard_check(vk_left)) 
{ 
    image_angle = 180 - 45; 
    hspeed = -character_speed_sideways; 
    vspeed = character_speed_sideways;
    image_speed = character_animation_speed;
    
    obj_shadow_player.image_angle = 180 - 45; 
    obj_shadow_player.hspeed = -character_speed_sideways; 
    obj_shadow_player.vspeed = character_speed_sideways; 
    speech_cooldown++;
} 

if(keyboard_check(vk_down) &amp;&amp; keyboard_check(vk_right)) 
{ 
    image_angle = 180 + 45; 
    hspeed = character_speed_sideways; 
    vspeed = character_speed_sideways;
    image_speed = character_animation_speed;
    
    obj_shadow_player.image_angle = 180 + 45; 
    obj_shadow_player.hspeed = character_speed_sideways; 
    obj_shadow_player.vspeed = character_speed_sideways; 
    speech_cooldown++;
}

// ABILITIES 

// JUMP
if(keyboard_check(vk_control))
{
    if(bJumpUp == 0)
    {
        mask = sprite_duplicate(spr_player);
        sprite_collision_mask(mask,false,2,10,10,10,10,0,255);
        mask_index = mask;
        
        bJumpUp = 1;
        number_of_jumps++;
    }
}

// SPAWN BRIDGE
if(keyboard_check_pressed(vk_f1))
{
    if(bridge &gt; 0)
    {
        bridge_count = 3;
        
        put_x_start = x-(sprite_width/2);
        put_y_start = y-(sprite_height/2);
        
        if(image_angle &gt;= 0 &amp;&amp; image_angle &lt; 90)      
            most_direction = 0;
        if(image_angle &gt;= 90 &amp;&amp; image_angle &lt; 180)
            most_direction = 1;
        if(image_angle &gt;= 180 &amp;&amp; image_angle &lt; 270)
            most_direction = 2;
        if(image_angle &gt;= 270 &amp;&amp; image_angle &lt; 360)
            most_direction = 3;
        
        for(i=1; i&lt;=bridge_count; i++)
        {
            offset = obj_most.sprite_height * i;
            if(most_direction == 0)
                instance_create(put_x_start, put_y_start-offset, obj_most);
            if(most_direction == 2)
                instance_create(put_x_start, put_y_start+offset, obj_most);
            if(most_direction == 1)
                instance_create(put_x_start-offset, put_y_start, obj_most);
            if(most_direction == 3)
                instance_create(put_x_start+offset, put_y_start, obj_most);
        }
        bridge--;
    }
}

// BLINK
if(keyboard_check_pressed(vk_f2))
{
    if(blink &gt; 0)
    {
        blink_distance = 100;
    
        if(image_angle &gt;= 0 &amp;&amp; image_angle &lt; 90)      
            blink_direction = 0;
        if(image_angle &gt;= 90 &amp;&amp; image_angle &lt; 180)
            blink_direction = 1;
        if(image_angle &gt;= 180 &amp;&amp; image_angle &lt; 270)
            blink_direction = 2;
        if(image_angle &gt;= 270 &amp;&amp; image_angle &lt; 360)
            blink_direction = 3;
            
        if(blink_direction == 0)
        {
            y-=blink_distance;
            obj_shadow_player.y-=blink_distance;
        }
        if(blink_direction == 2)
        {
            y+=blink_distance;
            obj_shadow_player.y+=blink_distance;   
        }
        if(blink_direction == 1)
        {
            x-=blink_distance;
            obj_shadow_player.x-=blink_distance;
        }
        if(blink_direction == 3)
        {
            x+=blink_distance;
            obj_shadow_player.x+=blink_distance;
        }
        blink--;
    }
}

// TOTEM EFFECTS
if(place_meeting(x, y, obj_switch))
{
    if(keyboard_check_pressed(vk_pageup))
    {
        sunshine = true;
    }
    if(keyboard_check_pressed(vk_pagedown))
    {
        sunshine = false;
    }
}
 
if(sunshine)
    obj_darkness.visible = false;
if(!sunshine)
    obj_darkness.visible = true;

// MOVABLE
if(distance_to_object(obj_movable) &lt; 80)
{
    if(keyboard_check_pressed(vk_end))
    {
        hasMovable = instance_nearest(x, y, obj_movable);
    }
}

if(hasMovable != false)
{
    hasMovable.x = x+40;
    hasMovable.y = y-16;
}

if(keyboard_check_pressed(vk_home))
{
    if(collision_rectangle(obj_movable.x-100, obj_movable.y-100, obj_movable.x+100, obj_movable.y+100, obj_placeable, false, false))
    {
        whereToPlace = instance_nearest(x, y, obj_placeable);
        show_debug_message(hasMovable.x); 
        hasMovable.x = whereToPlace.x;
        hasMovable.y = whereToPlace.y;
        
        with(obj_lava)
        {
            if(distance_to_object(obj_movable) &lt; 80)
            {
                instance_change(obj_walkway, true);   
            }
        }
    }
    hasMovable = false;
}

// STOP NA ANIMACIJA NA SPRAJT
if(keyboard_check_released(vk_up) || keyboard_check_released(vk_down) || keyboard_check_released(vk_left) || keyboard_check_released(vk_right) )
{
    image_speed = 0;
}

// NE SKOK
if(bJumpUp == 0)
{
    obj_shadow_player.x = x;
    obj_shadow_player.y = y;
}

// SKOK
if(bJumpUp != 0)
{
    image_speed = 0;
}

if(bJumpUp == 1)
{
    image_xscale += 0.02;
    image_yscale += 0.02;
    
    obj_shadow_player.x += 0.8;
    obj_shadow_player.y += 0.8;
    
    obj_shadow_player.image_xscale -= 0.02;
    obj_shadow_player.image_yscale -= 0.02;
    
    if(image_xscale == scaleStart + jHeight)
        bJumpUp = 2;
}

if(bJumpUp == 2)
{
    image_xscale -= 0.02;
    image_yscale -= 0.02;
    
    obj_shadow_player.x -= 0.8;
    obj_shadow_player.y -= 0.8;
    
    obj_shadow_player.image_xscale += 0.02;
    obj_shadow_player.image_yscale += 0.02;
    
    if(image_xscale == scaleStart)
    {
        mask_index = spr_player;
        if(place_meeting(x, y, obj_wall))
        {
            moveTo = instance_nearest(x, y, obj_walkway);
            x = moveTo.x;
            y = moveTo.y;
        }
        bJumpUp = 0;
    }
}

// FALLING 

if(!(position_meeting(x, y, obj_walkway) || position_meeting(x,y,obj_most) || (position_meeting(x, y, obj_blinking_floor) &amp;&amp; obj_blinking_floor.visible)) &amp;&amp; image_xscale &lt;= 1)
{
    fall = true;
}

if(fall = true)
{
    if (image_xscale &gt; 0.03)
    {
        // Falling animation
        image_xscale -= 0.08;
        image_yscale -= 0.08;
        depth+=10;
        
        obj_shadow_player.depth = 301;
        obj_shadow_player.image_xscale -= 0.08;
        obj_shadow_player.image_yscale -= 0.08;
    }
    else
    {
        global.lives--;
        game_restart();
    }
}

// TOTEMS 

if(distance_to_object(obj_totem_jump_around) &lt; totem_action_radius)
{
    if(keyboard_check(ord('E')) &amp;&amp; !audio_is_playing(mus_jump_around) &amp;&amp; jump_diff != -12)
    {   
        audio_play_sound(mus_jump_around, 1, false);
        jump_diff = number_of_jumps;
    }
    
    if(number_of_jumps - jump_diff == totem_jump_requirement)
    {
        bridge++;
        jump_diff = -12;
        audio_stop_all();
    }
}

if(distance_to_object(obj_totem_groove) &lt; totem_action_radius)
{
    if(keyboard_check(ord('E')) &amp;&amp; !audio_is_playing(mus_groove) &amp;&amp; groove != -1)
    {   
        audio_play_sound(mus_groove, 1, false);
    }
    
    if(groove == true)
    {
        blink += 3;
        groove = -1;
        audio_stop_all();
    }
}

if(distance_to_object(obj_totem_carousel) &lt; totem_action_radius)
{
    if(keyboard_check(ord('E')) &amp;&amp; !audio_is_playing(mus_carousel) &amp;&amp; carousel != -1)
    {   
        audio_play_sound(mus_carousel, 1, false);
    }
    
    if(carousel == true)
    {
        blink += 5;
        bridge += 3;
        carousel = -1;
        audio_stop_all();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rune">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_rune</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>carousel</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_movable">
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>-1</sound>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_not_heart">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lives</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_heart">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_heart</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>groove</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>-1</sound>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>-16,-16</point>
    <point>16,-16</point>
    <point>16,16</point>
    <point>-16,16</point>
  </PhysicsShapePoints>
</object>
